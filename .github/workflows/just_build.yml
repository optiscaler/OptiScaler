# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build

on:
  workflow_dispatch:
  # push:
  #   branches: [ "master" ]
  #  pull_request:
  #    branches: [ "master" ]
    
env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'
        
    - name: Extract Version
      id: get_version
      working-directory: ${{ github.workspace }}
      shell: powershell
      run: |
        # Ensure the file exists before proceeding
        $resourceFile = ".\OptiScaler\resource.h"
        if (-Not (Test-Path $resourceFile)) {
            Write-Error "File not found: $resourceFile"
            exit 1
        }
        
        # Helper function to extract the first matching line for a version component
        function Get-Version-Component {
            param (
                [string]$pattern,
                [string]$replacement
            )
            # Use Select-String and take only the first match
            $line = Get-Content $resourceFile | Select-String -Pattern $pattern | Select-Object -First 1
            if ($line) {
                return ($line.Line -replace $replacement).Trim()
            } else {
                Write-Error "Pattern not found: $pattern"
                exit 1
            }
        }
        
        # Extract version components (only the first match for each pattern)
        $majorVersion = Get-Version-Component 'VER_MAJOR_VERSION' '#define VER_MAJOR_VERSION\s+'
        $minorVersion = Get-Version-Component 'VER_MINOR_VERSION' '#define VER_MINOR_VERSION\s+'
        $hotfixVersion = Get-Version-Component 'VER_HOTFIX_VERSION' '#define VER_HOTFIX_VERSION\s+'
        $buildVersion = Get-Version-Component 'VER_BUILD_NUMBER' '#define VER_BUILD_NUMBER\s+'
        
        # Merge into a single version string
        $version = "v$majorVersion.$minorVersion.$hotfixVersion-pre$buildVersion"
        
        # Get the current date in a specific format (e.g., YYYYMMDD)
        $date = Get-Date -Format "yyyyMMdd"
        
        # Construct the output filename with version and date
        $outputFileName = "OptiScaler_${version}_${date}"
        
        # Output the generated filename
        Write-Output "Generated Filename: $outputFileName"
        
        # Write outputs to GITHUB_OUTPUT
        "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "filename=$outputFileName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        
      continue-on-error: false
      
    - name: Debug Outputs
      run: |
        echo "Version: ${{ steps.get_version.outputs.version }}"
        echo "Filename: ${{ steps.get_version.outputs.filename }}"
        
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}} /verbosity:minimal
      
    - name: Download latest dlssg-to-fsr3 release
      id: dlssg_download
      shell: powershell
      run: |
        # Get the latest release info from the API
        $releases = Invoke-RestMethod -Uri "https://api.github.com/repos/xXJSONDeruloXx/dlssg-to-fsr3/releases/latest"
        
        # Find the standard ZIP asset (not Universal or DLSSTweaks.Edition)
        $asset = $releases.assets | Where-Object { 
          $_.name -like "dlssg-to-fsr3-*.zip" -and 
          $_.name -notlike "*Universal*" -and 
          $_.name -notlike "*DLSSTweaks.Edition*" 
        } | Select-Object -First 1
        
        if (-not $asset) {
            Write-Error "Could not find appropriate dlssg-to-fsr3 release asset"
            exit 1
        }
        
        Write-Output "Downloading $($asset.name)..."
        
        # Download the asset
        $downloadUrl = $asset.browser_download_url
        $zipPath = "${{ github.workspace }}\dlssg-to-fsr3.zip"
        Invoke-WebRequest -Uri $downloadUrl -OutFile $zipPath
        
        # Extract the ZIP file
        $extractPath = "${{ github.workspace }}\dlssg-temp"
        Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
        
        # Find the DLL file in the extracted directory
        $dllPath = Get-ChildItem -Path $extractPath -Recurse -Filter "dlssg_to_fsr3_amd_is_better.dll" | Select-Object -First 1 -ExpandProperty FullName
        
        if (-not $dllPath) {
            Write-Error "Could not find dlssg_to_fsr3_amd_is_better.dll in the extracted files"
            exit 1
        }
        
        # Copy the DLL to the artifact directory
        Copy-Item -Path $dllPath -Destination "${{ github.workspace }}\x64\Release\a\"
        
        Write-Output "Successfully copied dlssg_to_fsr3_amd_is_better.dll to artifact directory"
      continue-on-error: false
    
    - name: Download latest fakenvapi release
      id: fakenvapi_download
      shell: powershell
      run: |
        # Get the latest release info from the API
        $releases = Invoke-RestMethod -Uri "https://api.github.com/repos/FakeMichau/fakenvapi/releases/latest"
        
        # Find the fakenvapi.zip asset
        $asset = $releases.assets | Where-Object { 
          $_.name -eq "fakenvapi.zip"
        } | Select-Object -First 1
        
        if (-not $asset) {
            Write-Error "Could not find fakenvapi.zip in the latest release"
            exit 1
        }
        
        Write-Output "Downloading $($asset.name)..."
        
        # Download the asset
        $downloadUrl = $asset.browser_download_url
        $zipPath = "${{ github.workspace }}\fakenvapi.zip"
        Invoke-WebRequest -Uri $downloadUrl -OutFile $zipPath
        
        # Extract the ZIP file
        $extractPath = "${{ github.workspace }}\fakenvapi-temp"
        Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
        
        # Find the required files in the extracted directory
        $nvapi64Path = Get-ChildItem -Path $extractPath -Recurse -Filter "nvapi64.dll" | Select-Object -First 1 -ExpandProperty FullName
        $fakenvApiIniPath = Get-ChildItem -Path $extractPath -Recurse -Filter "fakenvapi.ini" | Select-Object -First 1 -ExpandProperty FullName
        
        if (-not $nvapi64Path) {
            Write-Error "Could not find nvapi64.dll in the extracted files"
            exit 1
        }
        
        if (-not $fakenvApiIniPath) {
            Write-Error "Could not find fakenvapi.ini in the extracted files"
            exit 1
        }
        
        # Copy the files to the artifact directory
        Copy-Item -Path $nvapi64Path -Destination "${{ github.workspace }}\x64\Release\a\"
        Copy-Item -Path $fakenvApiIniPath -Destination "${{ github.workspace }}\x64\Release\a\"
        
        Write-Output "Successfully copied nvapi64.dll and fakenvapi.ini to artifact directory"
      continue-on-error: false
    
    # Compress artifact
    - name: Compress artifact 
      run: |
        $zipName = "${{ steps.get_version.outputs.filename }}.7z"
        7z a -r ${{ github.workspace }}\$zipName ${{ github.workspace }}\x64\Release\a\*.*
      continue-on-error: false
    
    # Upload artifact
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.get_version.outputs.filename }}
        path: ${{ github.workspace }}\${{ steps.get_version.outputs.filename }}.7z
        compression-level: 0
        if-no-files-found: error



